-- SchÃ©ma
DROP SCHEMA IF EXISTS projet CASCADE;
CREATE SCHEMA projet AUTHORIZATION projet;
GRANT ALL PRIVILEGES ON SCHEMA projet TO projet;
 
-- Tables
CREATE TABLE utilisateur (
	id_utilisateur	INT				GENERATED BY DEFAULT AS IDENTITY,
	nom				VARCHAR(50),
	prenom			VARCHAR(50),
	e_mail			VARCHAR(225),
	num_tel			VARCHAR(10) ,
	date_naissance	DATE,
	login			VARCHAR(50),
	mot_passe		VARCHAR(50),
	CONSTRAINT utilisateur_pkey PRIMARY KEY (id_utilisateur),
	UNIQUE(login),
	CHECK (char_length(num_tel) = 10)
);

CREATE TABLE role_benevole (
	id_role			INT				GENERATED BY DEFAULT AS IDENTITY,
	nom_role		VARCHAR(50),
	CONSTRAINT role_benevole_pkey PRIMARY KEY (id_role)
);

CREATE TABLE raid (
	id_raid			INT				GENERATED BY DEFAULT AS IDENTITY (START WITH 3),
	nom_raid		VARCHAR(50),
	annee			DATE,
	prix_insc		DOUBLE PRECISION,
	prix_repas		DOUBLE PRECISION,
	CONSTRAINT raid_pkey PRIMARY KEY (id_raid),
	CHECK (prix_insc >=0),
	CHECK (prix_repas >=0)
);

CREATE TABLE poste (
	id_poste		INT				GENERATED BY DEFAULT AS IDENTITY (START WITH 13),
	id_raid			INT,
	nbr_benev		INT,
	CONSTRAINT poste_pkey PRIMARY KEY (id_poste),
	CONSTRAINT poste_id_raid_fkey FOREIGN KEY (id_raid) REFERENCES raid (id_raid),
	CHECK (nbr_benev >=0)
);

CREATE TABLE benevole (
	id_utilisateur	INT				NOT NULL,
	id_role			INT				NOT NULL,
	possede_permis	BOOLEAN,
	CONSTRAINT benevole_pkey PRIMARY KEY (id_utilisateur),
	CONSTRAINT benevole_id_utilisateur FOREIGN KEY (id_utilisateur) REFERENCES utilisateur (id_utilisateur),
	CONSTRAINT benevole_id_role_fkey FOREIGN KEY (id_role) REFERENCES role_benevole (id_role)
);

CREATE TABLE action_benevole (
	id_action		INT				GENERATED BY DEFAULT AS IDENTITY (START WITH 31),
	id_poste		INT,
	id_utilisateur	INT,
	panneau_prendre	BOOLEAN,
	descr_action	TEXT,
	signaleur		BOOLEAN,
	horaire_debut	TIME,
	horaire_fin		TIME,
	CONSTRAINT action_benevole_pkey PRIMARY KEY (id_action),
	CONSTRAINT action_benevole_id_poste_fkey FOREIGN KEY (id_poste) REFERENCES poste (id_poste),
	CONSTRAINT action_benevole_id_utilisateur_fkey FOREIGN KEY (id_utilisateur) REFERENCES benevole (id_utilisateur)
);

CREATE TABLE categorie_raid (
	id_categorie	INT				GENERATED BY DEFAULT AS IDENTITY (START WITH 5),
	nom_categorie	VARCHAR(50)		NOT NULL,
	CONSTRAINT categorie_role_pkey	PRIMARY KEY (id_categorie)
);

CREATE TABLE participant (
	id_utilisateur	INT				NOT NULL,
	club			VARCHAR(50),
	CONSTRAINT participant_pkey	PRIMARY KEY (id_utilisateur),
	CONSTRAINT participant_id_utilisateur_fkey FOREIGN KEY (id_utilisateur) REFERENCES utilisateur (id_utilisateur)
);

CREATE TABLE participant_duo (
	id_part_duo		INT				GENERATED BY DEFAULT AS IDENTITY (START WITH 36),
	id_categorie	INT,
	id_raid			INT,
	nbr_repas		INT,
	paiement_valide	BOOLEAN,
	CONSTRAINT participant_duo_pkey PRIMARY KEY (id_part_duo),
	CONSTRAINT participant_duo_id_categorie_fkey FOREIGN KEY (id_categorie) REFERENCES categorie_raid (id_categorie),
	CONSTRAINT participant_duo_id_raid_fkey FOREIGN KEY (id_raid) REFERENCES raid (id_raid),
	CHECK (nbr_repas >=0)
);

CREATE TABLE forme_duo (
	id_part_duo		INT,
	id_utilisateur	INT,
	est_capitaine	BOOLEAN			NOT NULL,
	CONSTRAINT forme_duo_id_part_duo_fkey FOREIGN KEY (id_part_duo) REFERENCES participant_duo (id_part_duo),
	CONSTRAINT forme_duo_id_utilisateur_fkey FOREIGN KEY (id_utilisateur) REFERENCES participant (id_utilisateur)
);

CREATE TABLE participe_organisation (
	id_raid			INT,
	id_utilisateur	INT,
	nbr_repas		INT,
	CONSTRAINT participe_organisation_id_utilisateur_fkey FOREIGN KEY (id_utilisateur) REFERENCES benevole (id_utilisateur),
	CONSTRAINT participe_organisation_id_raid_fkey FOREIGN KEY (id_raid) REFERENCES raid (id_raid),
	CHECK (nbr_repas >=0)
);

CREATE TABLE validation_medicale (
	id_validation		INT			GENERATED BY DEFAULT AS IDENTITY (START WITH 71),
	id_utilisateur		INT,
	est_valide			BOOLEAN,
	date_expiration		DATE,
	CONSTRAINT validation_medicale_pkey PRIMARY KEY (id_validation),
	CONSTRAINT validation_medicale_id_utilisateur_fkey FOREIGN KEY (id_utilisateur) REFERENCES participant (id_utilisateur)
);

